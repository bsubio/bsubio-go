openapi: 3.0.3
info:
  title: BSUB.IO API
  description: |
    REST API for batch processing compute-intensive workloads.

    Submit jobs, upload data, and retrieve results through a simple API.
    Perfect for PDF processing, video transcoding, audio transcription, and more.

    ## Authentication

    All endpoints require Bearer token authentication using your API key:

    ```
    Authorization: Bearer <your-api-key>
    ```

    Get your API key from the [Dashboard](/).

    ## Job Lifecycle

    1. **Create** a job with `POST /v1/jobs` - Returns job ID and upload token
    2. **Upload** data with `POST /v1/upload/{jobId}` - Uses upload token
    3. **Submit** for processing with `POST /v1/jobs/{jobId}/submit`
    4. **Monitor** status with `GET /v1/jobs/{jobId}`
    5. **Retrieve** output with `GET /v1/jobs/{jobId}/output`

    ## Job States

    - `Created` - Job created, awaiting data upload
    - `Loaded` - Data uploaded successfully
    - `Pending` - Waiting in queue for a worker
    - `Claimed` - Worker claimed the job
    - `Preparing` - Worker preparing to process
    - `InProgress` - Processing started
    - `Finished` - Processing completed successfully
    - `Failed` - Processing failed with error

  version: 1.0.0
  contact:
    name: BSUB.IO Support
    url: https://bsub.io
  license:
    name: MIT

servers:
  - url: https://app.bsub.io
    description: Production server
  - url: http://localhost:9986
    description: Local development server

tags:
  - name: Jobs
    description: Job creation, submission, and management
  - name: Output
    description: Retrieve job results and logs
  - name: System
    description: System information and available processing types

security:
  - BearerAuth: []

paths:
  /v1/jobs:
    post:
      tags:
        - Jobs
      summary: Create a new job
      description: |
        Creates a new job and returns a job ID and upload token.
        The upload token is required for uploading data to the job.
      operationId: createJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  description: Processing type (see /v1/types for available types)
                  example: pandoc_md
            examples:
              pandocMarkdown:
                summary: Convert to Markdown with Pandoc
                value:
                  type: pandoc_md
              ffprobe:
                summary: Extract video metadata
                value:
                  type: ffprobe
              imageResize:
                summary: Resize image
                value:
                  type: imagemagick_resize
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Job'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      tags:
        - Jobs
      summary: List jobs
      description: |
        Returns a paginated list of jobs for the authenticated user.
        Results can be filtered by status and limited.
      operationId: listJobs
      parameters:
        - name: status
          in: query
          description: Filter by job status
          required: false
          schema:
            type: string
            enum: [created, loaded, pending, claimed, preparing, in_progress, finished, failed]
          example: finished
        - name: limit
          in: query
          description: Maximum number of jobs to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      jobs:
                        type: array
                        items:
                          $ref: '#/components/schemas/Job'
                      total:
                        type: integer
                        description: Total number of jobs (before pagination)
                        example: 150
        '401':
          $ref: '#/components/responses/Unauthorized'

  /v1/jobs/{jobId}:
    get:
      tags:
        - Jobs
      summary: Get job details
      description: Returns detailed information about a specific job
      operationId: getJob
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Jobs
      summary: Delete a job
      description: |
        Deletes a job and its associated data.
        Only finished or failed jobs can be deleted.
      operationId: deleteJob
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '204':
          description: Job deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Job cannot be deleted (still in progress)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/jobs/{jobId}/submit:
    post:
      tags:
        - Jobs
      summary: Submit job for processing
      description: |
        Submits a job for processing after data has been uploaded.
        The job moves from 'Loaded' to 'Pending' state and enters the queue.
      operationId: submitJob
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description: Job submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Job submitted for processing
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/jobs/{jobId}/cancel:
    post:
      tags:
        - Jobs
      summary: Cancel a job
      description: |
        Cancels a pending or in-progress job.
        Finished or failed jobs cannot be cancelled.
      operationId: cancelJob
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description: Job cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Job cancelled
        '400':
          description: Job cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/jobs/{jobId}/output:
    get:
      tags:
        - Output
      summary: Get job output (stdout)
      description: |
        Returns the standard output (stdout) from the job processing.
        Only available for finished jobs.
      operationId: getJobOutput
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description: Job output
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                example: |
                  # Extracted Text

                  This is the content extracted from the PDF...
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Job not finished yet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/jobs/{jobId}/logs:
    get:
      tags:
        - Output
      summary: Get job logs (stderr)
      description: |
        Returns the standard error (stderr) from the job processing.
        Useful for debugging failed jobs.
      operationId: getJobLogs
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description: Job logs
          content:
            text/plain:
              schema:
                type: string
                example: |
                  2024-01-15 10:23:45 [INFO] Starting PDF extraction
                  2024-01-15 10:23:46 [ERROR] Failed to parse page 3
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/upload/{jobId}:
    post:
      tags:
        - Jobs
      summary: Upload data to a job
      description: |
        Uploads the input file for processing. Requires the upload token
        obtained when creating the job.
      operationId: uploadJobData
      parameters:
        - name: jobId
          in: path
          required: true
          description: Job ID (UUID without hyphens)
          schema:
            type: string
            pattern: '^[a-f0-9]{32}$'
        - name: token
          in: query
          required: true
          description: Upload token from job creation
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to process
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: File uploaded successfully
                  data_size:
                    type: integer
                    description: Size of uploaded file in bytes
                    example: 1048576
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid upload token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/types:
    get:
      tags:
        - System
      summary: Get available processing types
      description: |
        Returns a list of all processing types supported by the workers.
        Use these types when creating jobs.
      operationId: getTypes
      security: []
      responses:
        '200':
          description: List of processing types
          content:
            application/json:
              schema:
                type: object
                properties:
                  types:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProcessingType'
              examples:
                default:
                  summary: Available processing types
                  value:
                    types:
                      - name: passthrough
                        description: Pass data through unchanged (cat)
                      - name: json_format
                        description: Format JSON data (jq .)
                      - name: pandoc_md
                        description: Convert document to Markdown (pandoc -t markdown)
                      - name: pandoc_pdf
                        description: Convert document to PDF (pandoc -o output.pdf)
                      - name: pandoc_html
                        description: Convert document to HTML (pandoc -t html)
                      - name: ffprobe
                        description: Extract media metadata (ffprobe -v quiet -print_format json -show_format -show_streams)
                      - name: ffmpeg_mp4
                        description: Convert video to MP4 (ffmpeg -i input -c:v libx264 -c:a aac output.mp4)
                      - name: imagemagick_resize
                        description: Resize image (convert input -resize 800x600 output)
                      - name: imagemagick_thumbnail
                        description: Generate thumbnail (convert input -thumbnail 200x200 output)
                      - name: pdf_text
                        description: Extract text from PDF (pdftotext -layout)
                      - name: ocr_tesseract
                        description: OCR image to text (tesseract input stdout)
                      - name: wkhtmltopdf
                        description: HTML to PDF conversion (wkhtmltopdf - output.pdf)

  /v1/version:
    get:
      tags:
        - System
      summary: Get API version
      description: Returns version information for the API server
      operationId: getVersion
      security: []
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: "1.0.0"
                  server:
                    type: string
                    example: "bsub.io"
                  build:
                    type: string
                    example: "2024-01-15T10:30:00Z"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
      description: |
        Use your API key as a Bearer token in the Authorization header.
        Get your API key from the Dashboard.

  parameters:
    JobId:
      name: jobId
      in: path
      required: true
      description: Unique job identifier (UUID without hyphens)
      schema:
        type: string
        pattern: '^[a-f0-9]{32}$'
      example: "a1b2c3d4e5f67890abcdef1234567890"

  schemas:
    Job:
      type: object
      properties:
        id:
          type: string
          description: Unique job identifier (UUID without hyphens)
          pattern: '^[a-f0-9]{32}$'
          example: "a1b2c3d4e5f67890abcdef1234567890"
        status:
          type: string
          enum: [created, loaded, pending, claimed, preparing, in_progress, finished, failed]
          description: Current job status
          example: finished
        type:
          type: string
          description: Processing type
          example: pandoc_md
        user_id:
          type: string
          description: User who created the job
          example: "user123"
        upload_token:
          type: string
          description: Token for uploading data (only present in Created state)
          example: "tok_abc123xyz789"
        data_size:
          type: integer
          format: int64
          description: Size of uploaded data in bytes
          example: 1048576
        claimed_by:
          type: string
          nullable: true
          description: Worker ID that claimed the job
          example: "worker-01.bsub.io"
        error_code:
          type: string
          nullable: true
          description: Error code if job failed
          example: "ENOMEM"
        error_message:
          type: string
          nullable: true
          description: Error message if job failed
          example: "Out of memory while processing PDF"
        created_at:
          type: string
          format: date-time
          description: Job creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:35:00Z"
        claimed_at:
          type: string
          format: date-time
          nullable: true
          description: When job was claimed by worker
          example: "2024-01-15T10:31:00Z"
        finished_at:
          type: string
          format: date-time
          nullable: true
          description: When job finished (success or failure)
          example: "2024-01-15T10:35:00Z"

    ProcessingType:
      type: object
      properties:
        name:
          type: string
          description: Type identifier used when creating jobs
          example: pdf-extract
        description:
          type: string
          description: Human-readable description
          example: Extract text from PDF documents
        timeout:
          type: integer
          description: Processing timeout in seconds
          example: 300

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
          example: "Job not found"

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Invalid request: missing required field 'type'"

    Unauthorized:
      description: Unauthorized - Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Unauthorized: invalid API key"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Job not found"
